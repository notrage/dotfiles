*CopilotChat.txt*         For NVIM v0.8.0        Last change: 2024 November 19

==============================================================================
Table of Contents                              *CopilotChat-table-of-contents*

1. Copilot Chat for Neovim               |CopilotChat-copilot-chat-for-neovim|
  - Prerequisites                                  |CopilotChat-prerequisites|
  - Installation                                    |CopilotChat-installation|
  - Usage                                                  |CopilotChat-usage|
  - Configuration                                  |CopilotChat-configuration|
  - Tips                                                    |CopilotChat-tips|
  - Roadmap (Wishlist)                        |CopilotChat-roadmap-(wishlist)|
  - Development                                      |CopilotChat-development|
  - Contributors ✨                            |CopilotChat-contributors-✨|
2. Links                                                   |CopilotChat-links|

==============================================================================
1. Copilot Chat for Neovim               *CopilotChat-copilot-chat-for-neovim*

<https://copilotc-nvim.github.io/CopilotChat.nvim/>
<https://results.pre-commit.ci/latest/github/CopilotC-Nvim/CopilotChat.nvim/main>
<https://discord.gg/vy6hJsTWaZ>
<https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim> |CopilotChat-|


  [!NOTE] Plugin was rewritten to Lua from Python. Please check the migration
  guide from version 1 to version 2 </MIGRATION.md> for more information.
- |CopilotChat-prerequisites|
- |CopilotChat-installation|
    - |CopilotChat-lazy.nvim|
    - |CopilotChat-vim-plug|
    - |CopilotChat-manual|
    - |CopilotChat-post-installation|
- |CopilotChat-usage|
    - |CopilotChat-commands|
    - |CopilotChat-prompts|
    - |CopilotChat-system-prompts|
    - |CopilotChat-sticky-prompts|
    - |CopilotChat-models|
    - |CopilotChat-agents|
    - |CopilotChat-contexts|
    - |CopilotChat-selections|
    - |CopilotChat-api|
- |CopilotChat-configuration|
    - |CopilotChat-default-configuration|
    - |CopilotChat-customizing-buffers|
- |CopilotChat-tips|
- |CopilotChat-roadmap-(wishlist)|
- |CopilotChat-development|
- |CopilotChat-contributors-✨|


PREREQUISITES                                      *CopilotChat-prerequisites*

Ensure you have the following installed:

- **Neovim stable (0.9.5) or nightly**.

Verify "Copilot chat in the IDE <https://github.com/settings/copilot>" is
enabled.

Optional:

- tiktoken_core: `sudo luarocks install --lua-version 5.1 tiktoken_core`. Alternatively, download a pre-built binary from lua-tiktoken releases <https://github.com/gptlang/lua-tiktoken/releases>
- You can check your Lua PATH in Neovim by doing `:lua print(package.cpath)`. Save the binary as `tiktoken_core.so` in any of the given paths.


  For Arch Linux user, you can install `luajit-tiktoken-bin`
  <https://aur.archlinux.org/packages/luajit-tiktoken-bin> or
  `lua51-tiktoken-bin` <https://aur.archlinux.org/packages/lua51-tiktoken-bin>
  from aur!

INSTALLATION                                        *CopilotChat-installation*


LAZY.NVIM ~

>lua
    return {
      {
        "CopilotC-Nvim/CopilotChat.nvim",
        branch = "canary",
        dependencies = {
          { "github/copilot.vim" }, -- or zbirenbaum/copilot.lua
          { "nvim-lua/plenary.nvim" }, -- for curl, log wrapper
        },
        build = "make tiktoken", -- Only on MacOS or Linux
        opts = {
          -- See Configuration section for options
        },
        -- See Commands section for default commands if you want to lazy load on them
      },
    }
<

See @jellydn for configuration
<https://github.com/jellydn/lazy-nvim-ide/blob/main/lua/plugins/extras/copilot-chat-v2.lua>


VIM-PLUG ~

Similar to the lazy setup, you can use the following configuration:

>vim
    call plug#begin()
    Plug 'github/copilot.vim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'CopilotC-Nvim/CopilotChat.nvim', { 'branch': 'canary' }
    call plug#end()
    
    lua << EOF
    require("CopilotChat").setup {
      -- See Configuration section for options
    }
    EOF
<


MANUAL ~

1. Put the files in the right place

>
    mkdir -p ~/.config/nvim/pack/copilotchat/start
    cd ~/.config/nvim/pack/copilotchat/start
    
    git clone https://github.com/github/copilot.vim
    git clone https://github.com/nvim-lua/plenary.nvim
    
    git clone -b canary https://github.com/CopilotC-Nvim/CopilotChat.nvim
<

1. Add to your configuration (e.g. `~/.config/nvim/init.lua`)

>lua
    require("CopilotChat").setup {
      -- See Configuration section for options
    }
<

See @deathbeam for configuration
<https://github.com/deathbeam/dotfiles/blob/master/nvim/.config/nvim/lua/config/copilot.lua#L14>


USAGE                                                      *CopilotChat-usage*


COMMANDS ~

- `:CopilotChat <input>?` - Open chat window with optional input
- `:CopilotChatOpen` - Open chat window
- `:CopilotChatClose` - Close chat window
- `:CopilotChatToggle` - Toggle chat window
- `:CopilotChatStop` - Stop current copilot output
- `:CopilotChatReset` - Reset chat window
- `:CopilotChatSave <name>?` - Save chat history to file
- `:CopilotChatLoad <name>?` - Load chat history from file
- `:CopilotChatDebugInfo` - Show debug information
- `:CopilotChatModels` - View and select available models. This is reset when a new instance is made. Please set your model in `init.lua` for persistence.
- `:CopilotChatAgents` - View and select available agents. This is reset when a new instance is made. Please set your agent in `init.lua` for persistence.


PROMPTS ~

You can ask Copilot to do various tasks with prompts. You can reference prompts
with `/PromptName` in chat or call with command `:CopilotChat<PromptName>`.
Default prompts are:

- `Explain` - Write an explanation for the selected code and diagnostics as paragraphs of text
- `Review` - Review the selected code
- `Fix` - There is a problem in this code. Rewrite the code to show it with the bug fixed
- `Optimize` - Optimize the selected code to improve performance and readability
- `Docs` - Please add documentation comments to the selected code
- `Tests` - Please generate tests for my code
- `Commit` - Write commit message for the change with commitizen convention

You can define custom prompts like this (only `prompt` is required):

>lua
    {
      prompts = {
        MyCustomPrompt = {
          prompt = 'Explain how it works.',
          system_prompt = 'You are very good at explaining stuff',
          mapping = '<leader>ccmc',
          description = 'My custom prompt description',
        }
      }
    }
<


SYSTEM PROMPTS ~

System prompts specify the behavior of the AI model. You can reference system
prompts with `/PROMPT_NAME` in chat. Default system prompts are:

- `COPILOT_INSTRUCTIONS` - Base GitHub Copilot instructions
- `COPILOT_EXPLAIN` - On top of the base instructions adds coding tutor behavior
- `COPILOT_REVIEW` - On top of the base instructions adds code review behavior with instructions on how to generate diagnostics
- `COPILOT_GENERATE` - On top of the base instructions adds code generation behavior, with predefined formatting and generation rules

You can define custom system prompts like this (works same as `prompts` so you
can combine prompt and system prompt definitions):

>lua
    {
      prompts = {
        Yarrr = {
          system_prompt = 'You are fascinated by pirates, so please respond in pirate speak.',
        }
      }
    }
<


STICKY PROMPTS ~

You can set sticky prompt in chat by prefixing the text with `>` using markdown
blockquote syntax. The sticky prompt will be copied at start of every new
prompt in chat window. You can freely edit the sticky prompt, only rule is `>`
prefix at beginning of line. This is useful for preserving stuff like context
and agent selection (see below). Example usage:

>markdown
    > #files
    
    List all files in the workspace
<

>markdown
    > @models Using Mistral-small
    
    What is 1 + 11
<


MODELS ~

You can list available models with `:CopilotChatModels` command. Model
determines the AI model used for the chat. You can set the model in the prompt
by using `$` followed by the model name. Default models are:

- `gpt-4o` - This is the default Copilot Chat model. It is a versatile, multimodal model that excels in both text and image processing and is designed to provide fast, reliable responses. It also has superior performance in non-English languages. Gpt-4o is hosted on Azure.
- `claude-3.5-sonnet` - This model excels at coding tasks across the entire software development lifecycle, from initial design to bug fixes, maintenance to optimizations. GitHub Copilot uses Claude 3.5 Sonnet hosted on Amazon Web Services.
- `o1-preview` - This model is focused on advanced reasoning and solving complex problems, in particular in math and science. It responds more slowly than the gpt-4o model. You can make 10 requests to this model per day. o1-preview is hosted on Azure.
- `o1-mini` - This is the faster version of the o1-preview model, balancing the use of complex reasoning with the need for faster responses. It is best suited for code generation and small context operations. You can make 50 requests to this model per day. o1-mini is hosted on Azure.

For more information about models, see here
<https://docs.github.com/en/copilot/using-github-copilot/asking-github-copilot-questions-in-your-ide#ai-models-for-copilot-chat>
You can use more models from here <https://github.com/marketplace/models> by
using `@models` agent from here <https://github.com/marketplace/models-github>
(example: `@models Using Mistral-small, what is 1 + 11`)


AGENTS ~

Agents are used to determine the AI agent used for the chat. You can list
available agents with `:CopilotChatAgents` command. You can set the agent in
the prompt by using `@` followed by the agent name. Default "noop" agent is
`copilot`.

For more information about extension agents, see here
<https://docs.github.com/en/copilot/using-github-copilot/using-extensions-to-integrate-external-tools-with-copilot-chat>
You can install more agents from here
<https://github.com/marketplace?type=apps&copilot_app=true>


CONTEXTS ~

Contexts are used to determine the context of the chat. You can add context to
the prompt by using `#` followed by the context name (multiple contexts are
supported). If context supports input, you can set the input in the prompt by
using `:` followed by the input (or pressing `complete` key after `:`). Default
contexts are:

- `buffer` - Includes specified buffer in chat context (default current). Supports input.
- `buffers` - Includes all buffers in chat context (default listed). Supports input.
- `file` - Includes content of provided file in chat context. Supports input.
- `files` - Includes all non-hidden filenames in the current workspace in chat context. Supports input.
- `git` - Includes current git diff in chat context (default unstaged). Supports input.

You can define custom contexts like this:

>lua
    {
      contexts = {
        birthday = {
          input = function(callback)
            vim.ui.select({ 'user', 'napoleon' }, {
              prompt = 'Select birthday> ',
            }, callback)
          end,
          resolve = function(input)
            input = input or 'user'
            local birthday = input
            if input == 'user' then
              birthday = birthday .. ' birthday is April 1, 1990'
            elseif input == 'napoleon' then
              birthday = birthday .. ' birthday is August 15, 1769'
            end
    
            return {
              {
                content = birthday,
                filename = input .. '_birthday',
                filetype = 'text',
              }
            }
          end
        }
      }
    }
<


SELECTIONS ~

Selections are used to determine the source of the chat (so basically what to
chat about). Selections are configurable either by default or by prompt.
Default selection is `visual` or `buffer` (if no visual selection). Default
supported selections that live in `local select =
require("CopilotChat.select")` are:

- `select.visual` - Current visual selection. Works well with diffs.
- `select.buffer` - Current buffer content. Works well with diffs.
- `select.line` - Current line content. Works decently with diffs.
- `select.unnamed` - Content from the unnamed register.
- `select.clipboard` - Content from system clipboard.

You can define custom selection functions like this:

>lua
    {
      selection = function()
        -- Get content from * register
        local content = vim.fn.getreg('*')
        if not content or content == '' then
          return nil
        end
    
        return {
          content = content,
        }
      end
    }
<

Or chain multiple selections like this:

>lua
    {
      selection = function(source)
        return select.visual(source) or select.buffer(source)
      end
    }
<


API ~

>lua
    local chat = require("CopilotChat")
    
    -- Open chat window
    chat.open()
    
    -- Open chat window with custom options
    chat.open({
      window = {
        layout = 'float',
        title = 'My Title',
      },
    })
    
    -- Close chat window
    chat.close()
    
    -- Toggle chat window
    chat.toggle()
    
    -- Toggle chat window with custom options
    chat.toggle({
      window = {
        layout = 'float',
        title = 'My Title',
      },
    })
    
    -- Reset chat window
    chat.reset()
    
    -- Ask a question
    chat.ask("Explain how it works.")
    
    -- Ask a question with custom options
    chat.ask("Explain how it works.", {
      selection = require("CopilotChat.select").buffer,
    })
    
    -- Ask a question and do something with the response
    chat.ask("Show me something interesting", {
      callback = function(response)
        print("Response:", response)
      end,
    })
    
    -- Get all available prompts (can be used for integrations like fzf/telescope)
    local prompts = chat.prompts()
    
    -- Get last copilot response (also can be used for integrations and custom keymaps)
    local response = chat.response()
    
    -- Pick a prompt using vim.ui.select
    local actions = require("CopilotChat.actions")
    
    -- Pick prompt actions
    actions.pick(actions.prompt_actions({
        selection = require("CopilotChat.select").visual,
    }))
    
    -- Programmatically set log level
    chat.log_level("debug")
<


CONFIGURATION                                      *CopilotChat-configuration*


DEFAULT CONFIGURATION ~

Also see here </lua/CopilotChat/config.lua>:

>lua
    {
      debug = false, -- Enable debug logging (same as 'log_level = 'debug')
      log_level = 'info', -- Log level to use, 'trace', 'debug', 'info', 'warn', 'error', 'fatal'
      proxy = nil, -- [protocol://]host[:port] Use this proxy
      allow_insecure = false, -- Allow insecure server connections
    
      system_prompt = prompts.COPILOT_INSTRUCTIONS, -- System prompt to use (can be specified manually in prompt via /).
      model = 'gpt-4o', -- Default model to use, see ':CopilotChatModels' for available models (can be specified manually in prompt via $).
      agent = 'copilot', -- Default agent to use, see ':CopilotChatAgents' for available agents (can be specified manually in prompt via @).
      context = nil, -- Default context to use (can be specified manually in prompt via #).
      temperature = 0.1, -- GPT result temperature
    
      question_header = '## User ', -- Header to use for user questions
      answer_header = '## Copilot ', -- Header to use for AI answers
      error_header = '## Error ', -- Header to use for errors
      separator = '───', -- Separator to use in chat
    
      chat_autocomplete = true, -- Enable chat autocompletion (when disabled, requires manual `mappings.complete` trigger)
      show_folds = true, -- Shows folds for sections in chat
      show_help = true, -- Shows help message as virtual lines when waiting for user input
      auto_follow_cursor = true, -- Auto-follow cursor in chat
      auto_insert_mode = false, -- Automatically enter insert mode when opening window and on new prompt
      insert_at_end = false, -- Move cursor to end of buffer when inserting text
      clear_chat_on_new_prompt = false, -- Clears chat on every new prompt
      highlight_selection = true, -- Highlight selection in the source buffer when in the chat window
      highlight_headers = true, -- Highlight headers in chat, disable if using markdown renderers (like render-markdown.nvim)
    
      history_path = vim.fn.stdpath('data') .. '/copilotchat_history', -- Default path to stored history
      callback = nil, -- Callback to use when ask response is received
    
      -- default selection
      selection = function(source)
        return select.visual(source) or select.buffer(source)
      end,
    
      -- default contexts
      contexts = {
        buffer = {
          -- see config.lua for implementation
        },
        buffers = {
          -- see config.lua for implementation
        },
        file = {
          -- see config.lua for implementation
        },
        files = {
          -- see config.lua for implementation
        },
        git = {
          -- see config.lua for implementation
        },
      },
    
      -- default prompts
      prompts = {
        Explain = {
          prompt = '> /COPILOT_EXPLAIN\n\nWrite an explanation for the selected code and diagnostics as paragraphs of text.',
        },
        Review = {
          prompt = '> /COPILOT_REVIEW\n\nReview the selected code.',
          -- see config.lua for implementation
        },
        Fix = {
          prompt = '> /COPILOT_GENERATE\n\nThere is a problem in this code. Rewrite the code to show it with the bug fixed.',
        },
        Optimize = {
          prompt = '> /COPILOT_GENERATE\n\nOptimize the selected code to improve performance and readability.',
        },
        Docs = {
          prompt = '> /COPILOT_GENERATE\n\nPlease add documentation comments to the selected code.',
        },
        Tests = {
          prompt = '> /COPILOT_GENERATE\n\nPlease generate tests for my code.',
        },
        Commit = {
          prompt = '> #git:staged\n\nWrite commit message for the change with commitizen convention. Make sure the title has maximum 50 characters and message is wrapped at 72 characters. Wrap the whole message in code block with language gitcommit.',
        },
      },
    
      -- default window options
      window = {
        layout = 'vertical', -- 'vertical', 'horizontal', 'float', 'replace'
        width = 0.5, -- fractional width of parent, or absolute width in columns when > 1
        height = 0.5, -- fractional height of parent, or absolute height in rows when > 1
        -- Options below only apply to floating windows
        relative = 'editor', -- 'editor', 'win', 'cursor', 'mouse'
        border = 'single', -- 'none', single', 'double', 'rounded', 'solid', 'shadow'
        row = nil, -- row position of the window, default is centered
        col = nil, -- column position of the window, default is centered
        title = 'Copilot Chat', -- title of chat window
        footer = nil, -- footer of chat window
        zindex = 1, -- determines if window is on top or below other floating windows
      },
    
      -- default mappings
      mappings = {
        complete = {
          insert ='<Tab>',
        },
        close = {
          normal = 'q',
          insert = '<C-c>'
        },
        reset = {
          normal ='<C-l>',
          insert = '<C-l>'
        },
        submit_prompt = {
          normal = '<CR>',
          insert = '<C-s>'
        },
        toggle_sticky = {
          detail = 'Makes line under cursor sticky or deletes sticky line.',
          normal = 'gr',
        },
        accept_diff = {
          normal = '<C-y>',
          insert = '<C-y>'
        },
        yank_diff = {
          normal = 'gy',
          register = '"',
        },
        show_diff = {
          normal = 'gd'
        },
        show_system_prompt = {
          normal = 'gp'
        },
        show_user_selection = {
          normal = 'gs'
        },
      },
    }
<


CUSTOMIZING BUFFERS ~

You can set local options for the buffers that are created by this plugin:
`copilot-diff`, `copilot-system-prompt`, `copilot-user-selection`,
`copilot-chat`.

>lua
    vim.api.nvim_create_autocmd('BufEnter', {
        pattern = 'copilot-*',
        callback = function()
            vim.opt_local.relativenumber = true
    
            -- C-p to print last response
            vim.keymap.set('n', '<C-p>', function()
              print(require("CopilotChat").response())
            end, { buffer = true, remap = true })
        end
    })
<


TIPS                                                        *CopilotChat-tips*

Quick chat with your buffer ~

To chat with Copilot using the entire content of the buffer, you can add the
following configuration to your keymap:

>lua
    -- lazy.nvim keys
    
      -- Quick chat with Copilot
      {
        "<leader>ccq",
        function()
          local input = vim.fn.input("Quick Chat: ")
          if input ~= "" then
            require("CopilotChat").ask(input, { selection = require("CopilotChat.select").buffer })
          end
        end,
        desc = "CopilotChat - Quick chat",
      }
<

<https://gyazo.com/9b8cbf1d78a19f326282a6520bc9aab0>

Inline chat ~

Change the window layout to `float` and position relative to cursor to make the
window look like inline chat. This will allow you to chat with Copilot without
opening a new window.

>lua
    -- lazy.nvim opts
    
      {
        window = {
          layout = 'float',
          relative = 'cursor',
          width = 1,
          height = 0.4,
          row = 1
        }
      }
<

Telescope integration ~

Requires telescope.nvim <https://github.com/nvim-telescope/telescope.nvim>
plugin to be installed.

>lua
    -- lazy.nvim keys
    
      -- Show prompts actions with telescope
      {
        "<leader>ccp",
        function()
          local actions = require("CopilotChat.actions")
          require("CopilotChat.integrations.telescope").pick(actions.prompt_actions())
        end,
        desc = "CopilotChat - Prompt actions",
      },
<

fzf-lua integration ~

Requires fzf-lua <https://github.com/ibhagwan/fzf-lua> plugin to be installed.

>lua
    -- lazy.nvim keys
    
      -- Show prompts actions with fzf-lua
      {
        "<leader>ccp",
        function()
          local actions = require("CopilotChat.actions")
          require("CopilotChat.integrations.fzflua").pick(actions.prompt_actions())
        end,
        desc = "CopilotChat - Prompt actions",
      },
<

render-markdown integration ~

Requires render-markdown
<https://github.com/MeanderingProgrammer/render-markdown.nvim> plugin to be
installed.

>lua
    -- Registers copilot-chat filetype for markdown rendering
    require('render-markdown').setup({
      file_types = { 'markdown', 'copilot-chat' },
    })
    
    -- You might also want to disable default header highlighting for copilot chat when doing this and set error header style and separator
    require('CopilotChat').setup({
      highlight_headers = false,
      separator = '---',
      error_header = '> [!ERROR] Error',
      -- rest of your config
    })
<


ROADMAP (WISHLIST)                            *CopilotChat-roadmap-(wishlist)*

- Use indexed vector database with current workspace for better context selection
- General QOL improvements


DEVELOPMENT                                          *CopilotChat-development*


INSTALLING PRE-COMMIT TOOL ~

For development, you can use the provided Makefile command to install the
pre-commit tool:

>bash
    make install-pre-commit
<

This will install the pre-commit tool and the pre-commit hooks.


CONTRIBUTORS ✨                                *CopilotChat-contributors-✨*

If you want to contribute to this project, please read the CONTRIBUTING.md
</CONTRIBUTING.md> file.

Thanks goes to these wonderful people (emoji key
<https://allcontributors.org/docs/en/emoji-key>):

gptlang💻 📖Dung Duc Huynh (Kaka)💻 📖Ahmed Haracic💻Trí Thiện Nguyễn💻He Zhizhou💻Guruprakash Rajakkannu💻kristofka💻PostCyberPunk📖Katsuhiko Nishimra💻Erno Hopearuoho💻Shaun Garwood💻neutrinoA4💻 📖Jack Muratore💻Adriel Velazquez💻 📖Tomas Slusny💻 📖Nisal📖Tobias Gårdhus📖Petr Dlouhý📖Dylan Madisetti💻Aaron Weisberg💻 📖Jose Tlacuilo💻 📖Kevin Traver💻 📖dTry💻Arata Furukawa💻Ling💻Ivan Frolov💻Folke Lemaitre💻 📖GitMurf💻Dmitrii Lipin💻jinzhongjia📖guill💻Sjon-Paul Brown💻Renzo Mondragón💻 📖fjchen7💻Radosław Woźniak💻JakubPecenka💻thomastthai📖Tomáš Janoušek💻Toddneal Stallworth📖Sergey Alexandrov💻This project follows the all-contributors
<https://github.com/all-contributors/all-contributors> specification.
Contributions of any kind are welcome!


STARGAZERS OVER TIME ~

<https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim>

==============================================================================
2. Links                                                   *CopilotChat-links*

1. *Documentation*: https://img.shields.io/badge/documentation-yes-brightgreen.svg
2. *pre-commit.ci*: https://results.pre-commit.ci/badge/github/CopilotC-Nvim/CopilotChat.nvim/main.svg
3. *Discord*: https://img.shields.io/discord/1200633211236122665.svg
4. *Dotfyle*: https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim/shield?style=flat
5. *All Contributors*: https://img.shields.io/github/all-contributors/CopilotC-Nvim/CopilotChat.nvim?color=ee8449&style=flat&link=%23contributors-
6. *@jellydn*: 
7. *@deathbeam*: 
8. *Chat with buffer*: https://i.gyazo.com/9b8cbf1d78a19f326282a6520bc9aab0.gif
9. *inline-chat*: https://github.com/CopilotC-Nvim/CopilotChat.nvim/assets/5115805/608e3c9b-8569-408d-a5d1-2213325fc93c
10. *image*: https://github.com/CopilotC-Nvim/CopilotChat.nvim/assets/5115805/14360883-7535-4ee3-aca1-79f6c39f626b
11. *image*: https://github.com/CopilotC-Nvim/CopilotChat.nvim/assets/5115805/743455bb-9517-48a8-a7a1-81215dc3b747
12. *image*: https://github.com/user-attachments/assets/d8dc16f8-3f61-43fa-bfb9-83f240ae30e8
13. *Stargazers over time*: https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim.svg

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
